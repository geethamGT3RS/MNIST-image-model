# -*- coding: utf-8 -*-
"""computer_vision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GL0PTu026ETVCNoXs8ZflS33OgGimoEb

# **Logistic regression**
 modelling the probability of discrete outcomes given in input variable
"""

import torch
import torchvision
from torchvision.datasets import MNIST

"""when data is downloaded it returns to new directory which we presented in root"""

dataset = MNIST(root='data/', download=True)

len(dataset)

"""there are 10000 additional dataset which can be used to evaluate model"""

test_dataset=MNIST(root='data/', train=False)
len(test_dataset)

"""To check our downloaded images we need matplot to view image in colab. Statements starting with & are called magic commands they allow to configure the behaviour of lab used.

"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

image, label = dataset[0]
plt.imshow(image , cmap='gray')
print(label)

"""pytorch dosen't know how to work with images so we have to transform images to tensors"""

import torchvision.transforms as transforms
dataset = MNIST(root = 'data/' , train=True , transform=transforms.ToTensor())

dataset[0]

"""# **TRAINING AND VALIDATION OF DATASETS**

**Training Dataset**     
used to train our model,compute the loss and adjust the gradient of the model
**Validating Dataset**.          
Used to evaluate the model during the training, adjust hyper parameters and pick the best version of model.



LET'S SET THE 10000 RANDOMLY CHOSEN IMAGES FOR VALIDATION
"""

from torch.utils.data.sampler import SubsetRandomSampler
from torch.utils.data.dataloader import DataLoader

from torch.utils.data import random_split
train_ds, val_ds = random_split(dataset, [50000,10000])
len(train_ds),len(val_ds)

from torch.utils.data import DataLoader
batch_size = 100
train_loader = DataLoader(train_ds , batch_size , shuffle=True)
val_loader = DataLoader(val_ds, batch_size)

"""On the other hand, since the validation data loader is used only for evaluating the model, there is no need to shuffle the images."""

import torch.nn as nn 
input_size = 28 
num_classes = 10 
model = nn.Linear( input_size, num_classes)

for images, labels in train_loader:
  print(images.shape)
  print(labels)
  outputs = model(images)
  print(outputs[0:2])

images.shape

images.reshape(100, 784).shape

class MnistModel(nn.Module):

  def __init__(self):
    super().__init__()
    self.linear = nn.Linear(input_size, num_classes)

  def forward(self, xb):
    xb = xb.reshape(-1,784)
    out= self.linear(xb)
    return out

model = MnistModel()

for images, labels in  train_loader :
  print(images.shape)
  outputs = model(images)
  break
print(outputs.shape)
print(outputs[0:2])